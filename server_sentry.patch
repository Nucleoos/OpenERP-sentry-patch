=== modified file 'openerp/netsvc.py'
--- openerp/netsvc.py	2014-03-12 17:18:19 +0000
+++ openerp/netsvc.py	2014-05-12 21:05:13 +0000
@@ -47,6 +47,19 @@
 
 _logger = logging.getLogger(__name__)
 
+# Raven->Sentry setup
+# Need raven and raven_sanitize_openerp installed
+# If any steps here fail, client is set to None and will not run any raven code
+# later in execution
+try:
+    from . import oe_sentry
+except ImportError as e:
+    _logger.warn("Unable to import Raven Sentry Client: " + e.message)
+    oe_sentry = None
+except BaseException as e:
+    _logger.warn("Unknown Raven Sentry Client Error: " + e.message)
+    oe_sentry = None
+
 
 def close_socket(sock):
     """ Closes a socket instance cleanly
@@ -315,10 +328,16 @@
         raise
     except openerp.exceptions.DeferredException, e:
         _logger.exception(tools.exception_to_unicode(e))
+        if oe_sentry:
+            oe_sentry.sentry_intercept_exception(params)
         post_mortem(e.traceback)
         raise
     except Exception, e:
         _logger.exception(tools.exception_to_unicode(e))
+        openerp.tools.debugger.post_mortem(openerp.tools.config, sys.exc_info())
+        if oe_sentry and type(e) not in (openerp.osv.osv.except_osv,
+                                         openerp.osv.orm.except_orm):
+            oe_sentry.sentry_intercept_exception(params)
         post_mortem(sys.exc_info())
         raise
 

=== added file 'openerp/oe_sentry.py'
--- openerp/oe_sentry.py	1970-01-01 00:00:00 +0000
+++ openerp/oe_sentry.py	2014-05-12 21:10:34 +0000
@@ -0,0 +1,136 @@
+# -*- encoding: utf-8 -*-
+###############################################################################
+#
+#    OpenERP, Open Source Management Solution
+#    This module copyright (C) 2013 Savoir-faire Linux
+#    (<http://www.savoirfairelinux.com>).
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU Affero General Public License as
+#    published by the Free Software Foundation, either version 3 of the
+#    License, or (at your option) any later version.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU Affero General Public License for more details.
+#
+#    You should have received a copy of the GNU Affero General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+###############################################################################
+
+import logging
+import platform
+import os
+import sys
+from raven import Client
+from bzrlib.branch import Branch
+from bzrlib.errors import NotBranchError
+from openerp.tools import config
+from openerp.osv.orm import except_orm
+
+_logger = logging.getLogger(__name__)
+
+
+class BzrClient(Client):
+    """Subclass raven.Client to be able to report Bazaar revno as Module
+    versions"""
+
+    def __init__(self, dsn=None, **options):
+        self.bzr_revs = {}
+        return super(BzrClient, self).__init__(dsn=dsn, **options)
+
+    def set_rev_version(self, path):
+        """Given path, get source and revno, careful not to raise any
+        exceptions"""
+        try:
+            branch, rel_path = Branch.open_containing(path)
+            branch.lock_read()
+            # Clean name
+            name = (
+                branch.get_parent().replace(u'bazaar.launchpad.net/', u'lp:')
+                                   .replace(u'%7E', u'~')
+                                   .replace(u'%2Bbranch/', u'')
+                                   .replace(u'bzr+ssh://', u''))
+            self.bzr_revs[name] = u'r%i' % branch.revno()
+            branch.unlock()
+        except NotBranchError:
+            return
+        except:
+            if branch.is_locked():
+                branch.unlock()
+            return
+
+    def captureException(self, params=None, exc_info=None, **kwargs):
+        self.extra[u'params'] = params
+        return super(BzrClient, self).captureException(
+            exc_info=exc_info, **kwargs)
+
+    def build_msg(self, event_type, data=None, date=None,
+                  time_spent=None, extra=None, stack=None, public_key=None,
+                  tags=None, **kwargs):
+        """Add bzr revnos to msg's modules"""
+        res = super(BzrClient, self).build_msg(
+            event_type, data, date, time_spent, extra, stack, public_key,
+            tags, **kwargs)
+        res['modules'] = dict(res['modules'].items() + self.bzr_revs.items())
+        return res
+
+processors = (
+    'raven.processors.SanitizePasswordsProcessor',
+    'raven_sanitize_openerp.OpenerpPasswordsProcessor'
+)
+if config.get(u'sentry_dsn'):
+    # Get DSN info from config file or ~/.openerp_serverrc (recommended)
+    dsn = config.get('sentry_dsn')
+    # Send the following library versions, include all eggs
+    include_paths = [
+        'openerp',
+        'sentry',
+        'raven',
+        'raven_sanitize_openerp',
+    ] + [os.path.basename(i).split('-')[0]
+         for i in sys.path if i.endswith('.egg')]
+    # Add tags, OS and bzr revisions for Server and Addons
+    tags = {
+        'OS': (" ".join(platform.linux_distribution()).strip() or
+               " ".join(platform.win32_ver()).strip() or
+               " ".join((platform.system(), platform.release(),
+                         platform.machine()))),
+    }
+    # Create Client
+    client = BzrClient(
+        dsn=dsn,
+        processors=processors,
+        include_paths=include_paths,
+        tags=tags
+    )
+    # Using bzrlib find revision numbers for server and addons
+    client.set_rev_version(config.get(u'root_path') + u"/..", )
+    # Create and test message for Sentry
+    client.captureMessage(u'Sentry Tracking Activated!')
+else:
+    _logger.warn(u"Sentry DSN not defined in config file")
+    client = None
+
+
+def sentry_intercept_exception(params):
+    """Intercept OpenERP exception and raise a different one if raven is well
+    connected to Sentry"""
+    res = False
+    if not client or client.state.did_fail():
+        return
+    try:
+        # Store exc_info in case another exception is raised.
+        exc_info = sys.exc_info()
+        # Using bzrlib find revision numbers for server and addons
+        for path in config.get(u'addons_path').split(u','):
+            client.set_rev_version(path)
+        client.captureException(params, exc_info=exc_info)
+        res = True
+    finally:
+        if res:
+            raise except_orm(u"Erreur!",
+                             u"""An internal OpenERP error occurred...
+A report was sent to the IT department.""")

